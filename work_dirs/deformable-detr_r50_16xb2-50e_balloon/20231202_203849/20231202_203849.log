2023/12/02 20:38:50 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 870499874
    GPU 0: NVIDIA GeForce RTX 3060
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.1.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.1
    OpenCV: 4.8.1
    MMEngine: 0.10.1

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 870499874
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/12/02 20:38:50 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=32)
backend_args = None
data_root = 'data/balloon/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(_scope_='mmdet', interval=1, type='CheckpointHook'),
    logger=dict(_scope_='mmdet', interval=50, type='LoggerHook'),
    param_scheduler=dict(_scope_='mmdet', type='ParamSchedulerHook'),
    sampler_seed=dict(_scope_='mmdet', type='DistSamplerSeedHook'),
    timer=dict(_scope_='mmdet', type='IterTimerHook'),
    visualization=dict(_scope_='mmdet', type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/deformable_detr/deformable-detr_r50_16xb2-50e_coco/deformable-detr_r50_16xb2-50e_coco_20221029_210934-6bc7d21b.pth'
log_level = 'INFO'
log_processor = dict(
    _scope_='mmdet', by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 50
metainfo = dict(
    classes=('balloon', ), palette=[
        (
            220,
            20,
            60,
        ),
    ])
model = dict(
    _scope_='mmdet',
    as_two_stage=False,
    backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    bbox_head=dict(
        loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=2.0,
            type='FocalLoss',
            use_sigmoid=True),
        loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
        num_classes=1,
        sync_cls_avg_factor=True,
        type='DeformableDETRHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=1,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    decoder=dict(
        layer_cfg=dict(
            cross_attn_cfg=dict(batch_first=True, embed_dims=256),
            ffn_cfg=dict(
                embed_dims=256, feedforward_channels=1024, ffn_drop=0.1),
            self_attn_cfg=dict(
                batch_first=True, dropout=0.1, embed_dims=256, num_heads=8)),
        num_layers=6,
        post_norm_cfg=None,
        return_intermediate=True),
    encoder=dict(
        layer_cfg=dict(
            ffn_cfg=dict(
                embed_dims=256, feedforward_channels=1024, ffn_drop=0.1),
            self_attn_cfg=dict(batch_first=True, embed_dims=256)),
        num_layers=6),
    neck=dict(
        act_cfg=None,
        in_channels=[
            512,
            1024,
            2048,
        ],
        kernel_size=1,
        norm_cfg=dict(num_groups=32, type='GN'),
        num_outs=4,
        out_channels=256,
        type='ChannelMapper'),
    num_feature_levels=4,
    num_queries=300,
    positional_encoding=dict(normalize=True, num_feats=128, offset=-0.5),
    test_cfg=dict(max_per_img=100),
    train_cfg=dict(
        assigner=dict(
            match_costs=[
                dict(type='FocalLossCost', weight=2.0),
                dict(box_format='xywh', type='BBoxL1Cost', weight=5.0),
                dict(iou_mode='giou', type='IoUCost', weight=2.0),
            ],
            type='HungarianAssigner')),
    type='DeformableDETR',
    with_box_refine=False)
optim_wrapper = dict(
    _scope_='mmdet',
    clip_grad=dict(max_norm=0.1, norm_type=2),
    optimizer=dict(lr=0.0002, type='AdamW', weight_decay=0.0001),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(lr_mult=0.1),
            reference_points=dict(lr_mult=0.1),
            sampling_offsets=dict(lr_mult=0.1))),
    type='OptimWrapper')
param_scheduler = [
    dict(
        _scope_='mmdet',
        begin=0,
        by_epoch=True,
        end=50,
        gamma=0.1,
        milestones=[
            40,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(_scope_='mmdet', type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='val/annotation_coco.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/balloon/',
        metainfo=dict(classes=('balloon', ), palette=[
            (
                220,
                20,
                60,
            ),
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(_scope_='mmdet', backend_args=None, type='LoadImageFromFile'),
    dict(_scope_='mmdet', keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(
        _scope_='mmdet',
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(
    _scope_='mmdet', max_epochs=50, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(_scope_='mmdet', type='AspectRatioBatchSampler'),
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='train/annotation_coco.json',
        backend_args=None,
        data_prefix=dict(img='train/'),
        data_root='data/balloon/',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=('balloon', ), palette=[
            (
                220,
                20,
                60,
            ),
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                transforms=[
                    [
                        dict(
                            keep_ratio=True,
                            scales=[
                                (
                                    480,
                                    1333,
                                ),
                                (
                                    512,
                                    1333,
                                ),
                                (
                                    544,
                                    1333,
                                ),
                                (
                                    576,
                                    1333,
                                ),
                                (
                                    608,
                                    1333,
                                ),
                                (
                                    640,
                                    1333,
                                ),
                                (
                                    672,
                                    1333,
                                ),
                                (
                                    704,
                                    1333,
                                ),
                                (
                                    736,
                                    1333,
                                ),
                                (
                                    768,
                                    1333,
                                ),
                                (
                                    800,
                                    1333,
                                ),
                            ],
                            type='RandomChoiceResize'),
                    ],
                    [
                        dict(
                            keep_ratio=True,
                            scales=[
                                (
                                    400,
                                    4200,
                                ),
                                (
                                    500,
                                    4200,
                                ),
                                (
                                    600,
                                    4200,
                                ),
                            ],
                            type='RandomChoiceResize'),
                        dict(
                            allow_negative_crop=True,
                            crop_size=(
                                384,
                                600,
                            ),
                            crop_type='absolute_range',
                            type='RandomCrop'),
                        dict(
                            keep_ratio=True,
                            scales=[
                                (
                                    480,
                                    1333,
                                ),
                                (
                                    512,
                                    1333,
                                ),
                                (
                                    544,
                                    1333,
                                ),
                                (
                                    576,
                                    1333,
                                ),
                                (
                                    608,
                                    1333,
                                ),
                                (
                                    640,
                                    1333,
                                ),
                                (
                                    672,
                                    1333,
                                ),
                                (
                                    704,
                                    1333,
                                ),
                                (
                                    736,
                                    1333,
                                ),
                                (
                                    768,
                                    1333,
                                ),
                                (
                                    800,
                                    1333,
                                ),
                            ],
                            type='RandomChoiceResize'),
                    ],
                ],
                type='RandomChoice'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(_scope_='mmdet', backend_args=None, type='LoadImageFromFile'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(_scope_='mmdet', prob=0.5, type='RandomFlip'),
    dict(
        _scope_='mmdet',
        transforms=[
            [
                dict(
                    keep_ratio=True,
                    scales=[
                        (
                            480,
                            1333,
                        ),
                        (
                            512,
                            1333,
                        ),
                        (
                            544,
                            1333,
                        ),
                        (
                            576,
                            1333,
                        ),
                        (
                            608,
                            1333,
                        ),
                        (
                            640,
                            1333,
                        ),
                        (
                            672,
                            1333,
                        ),
                        (
                            704,
                            1333,
                        ),
                        (
                            736,
                            1333,
                        ),
                        (
                            768,
                            1333,
                        ),
                        (
                            800,
                            1333,
                        ),
                    ],
                    type='RandomChoiceResize'),
            ],
            [
                dict(
                    keep_ratio=True,
                    scales=[
                        (
                            400,
                            4200,
                        ),
                        (
                            500,
                            4200,
                        ),
                        (
                            600,
                            4200,
                        ),
                    ],
                    type='RandomChoiceResize'),
                dict(
                    allow_negative_crop=True,
                    crop_size=(
                        384,
                        600,
                    ),
                    crop_type='absolute_range',
                    type='RandomCrop'),
                dict(
                    keep_ratio=True,
                    scales=[
                        (
                            480,
                            1333,
                        ),
                        (
                            512,
                            1333,
                        ),
                        (
                            544,
                            1333,
                        ),
                        (
                            576,
                            1333,
                        ),
                        (
                            608,
                            1333,
                        ),
                        (
                            640,
                            1333,
                        ),
                        (
                            672,
                            1333,
                        ),
                        (
                            704,
                            1333,
                        ),
                        (
                            736,
                            1333,
                        ),
                        (
                            768,
                            1333,
                        ),
                        (
                            800,
                            1333,
                        ),
                    ],
                    type='RandomChoiceResize'),
            ],
        ],
        type='RandomChoice'),
    dict(_scope_='mmdet', type='PackDetInputs'),
]
val_cfg = dict(_scope_='mmdet', type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='val/annotation_coco.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/balloon/',
        metainfo=dict(classes=('balloon', ), palette=[
            (
                220,
                20,
                60,
            ),
        ]),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/balloon/val/annotation_coco.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(_scope_='mmdet', type='LocalVisBackend'),
]
visualizer = dict(
    _scope_='mmdet',
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/deformable-detr_r50_16xb2-50e_balloon'

2023/12/02 20:38:51 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/12/02 20:38:51 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.downsample.0.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.downsample.0.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.0.downsample.0.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.1.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.2.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer2.3.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.0.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.1.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.2.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.3.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.4.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- encoder.layers.5.self_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.0.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.1.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.2.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.3.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.4.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- decoder.layers.5.cross_attn.sampling_offsets.bias:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.weight:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.weight:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.weight:lr_mult=0.1
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.bias:lr=2e-05
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.bias:weight_decay=0.0001
2023/12/02 20:38:52 - mmengine - INFO - paramwise_options -- reference_points_fc.bias:lr_mult=0.1
2023/12/02 20:38:53 - mmengine - INFO - load model from: torchvision://resnet50
2023/12/02 20:38:53 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2023/12/02 20:39:02 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

level_embed - torch.Size([4, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.extra_convs.0.conv.weight - torch.Size([256, 2048, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.extra_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

neck.extra_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.cls_branches.0.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.cls_branches.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DeformableDETRHead  

bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

bbox_head.reg_branches.0.4.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in DeformableDETRHead  

bbox_head.reg_branches.0.4.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in DeformableDETRHead  

encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.cross_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

query_embedding.weight - torch.Size([300, 512]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

reference_points_fc.weight - torch.Size([2, 256]): 
The value is the same before and after calling `init_weights` of DeformableDETR  

reference_points_fc.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of DeformableDETR  
2023/12/02 20:39:09 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/deformable_detr/deformable-detr_r50_16xb2-50e_coco/deformable-detr_r50_16xb2-50e_coco_20221029_210934-6bc7d21b.pth
2023/12/02 20:39:09 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/12/02 20:39:09 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/12/02 20:39:09 - mmengine - INFO - Checkpoints will be saved to /home/hinata/mmdetection/work_dirs/deformable-detr_r50_16xb2-50e_balloon.
2023/12/02 20:39:34 - mmengine - INFO - Epoch(train)  [1][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:24:47  time: 0.4959  data_time: 0.0038  memory: 3779  grad_norm: 269.0261  loss: 9.6616  loss_cls: 0.9305  loss_bbox: 0.2441  loss_iou: 0.3493  d0.loss_cls: 1.4547  d0.loss_bbox: 0.2267  d0.loss_iou: 0.3342  d1.loss_cls: 1.0682  d1.loss_bbox: 0.2208  d1.loss_iou: 0.3375  d2.loss_cls: 0.9643  d2.loss_bbox: 0.2387  d2.loss_iou: 0.3416  d3.loss_cls: 0.8856  d3.loss_bbox: 0.2440  d3.loss_iou: 0.3398  d4.loss_cls: 0.8903  d4.loss_bbox: 0.2435  d4.loss_iou: 0.3479
2023/12/02 20:39:37 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:39:37 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/12/02 20:39:40 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:39:40 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.724 0.544 0.000 0.133 0.589
2023/12/02 20:39:40 - mmengine - INFO - Epoch(val) [1][13/13]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7240  coco/bbox_mAP_75: 0.5440  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1330  coco/bbox_mAP_l: 0.5890  data_time: 0.0101  time: 0.1153
2023/12/02 20:39:53 - mmengine - INFO - Epoch(train)  [2][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:18:25  time: 0.2728  data_time: 0.0028  memory: 3779  grad_norm: 406.7599  loss: 5.6681  loss_cls: 0.2293  loss_bbox: 0.2811  loss_iou: 0.3677  d0.loss_cls: 0.4688  d0.loss_bbox: 0.2941  d0.loss_iou: 0.3856  d1.loss_cls: 0.3210  d1.loss_bbox: 0.2814  d1.loss_iou: 0.3618  d2.loss_cls: 0.2647  d2.loss_bbox: 0.2788  d2.loss_iou: 0.3714  d3.loss_cls: 0.1989  d3.loss_bbox: 0.3098  d3.loss_iou: 0.3815  d4.loss_cls: 0.1960  d4.loss_bbox: 0.2986  d4.loss_iou: 0.3774
2023/12/02 20:39:57 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:39:57 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/12/02 20:39:59 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:39:59 - mmengine - INFO - bbox_mAP_copypaste: 0.490 0.820 0.627 0.000 0.351 0.557
2023/12/02 20:39:59 - mmengine - INFO - Epoch(val) [2][13/13]    coco/bbox_mAP: 0.4900  coco/bbox_mAP_50: 0.8200  coco/bbox_mAP_75: 0.6270  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3510  coco/bbox_mAP_l: 0.5570  data_time: 0.0032  time: 0.0914
2023/12/02 20:40:13 - mmengine - INFO - Epoch(train)  [3][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:16:26  time: 0.2803  data_time: 0.0025  memory: 3779  grad_norm: 397.4447  loss: 5.1828  loss_cls: 0.2246  loss_bbox: 0.2606  loss_iou: 0.3376  d0.loss_cls: 0.3416  d0.loss_bbox: 0.2583  d0.loss_iou: 0.3468  d1.loss_cls: 0.2770  d1.loss_bbox: 0.2908  d1.loss_iou: 0.3473  d2.loss_cls: 0.2337  d2.loss_bbox: 0.2796  d2.loss_iou: 0.3358  d3.loss_cls: 0.2364  d3.loss_bbox: 0.2622  d3.loss_iou: 0.3366  d4.loss_cls: 0.2255  d4.loss_bbox: 0.2561  d4.loss_iou: 0.3324
2023/12/02 20:40:16 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:40:16 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/12/02 20:40:18 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:40:18 - mmengine - INFO - bbox_mAP_copypaste: 0.447 0.744 0.514 0.000 0.275 0.527
2023/12/02 20:40:18 - mmengine - INFO - Epoch(val) [3][13/13]    coco/bbox_mAP: 0.4470  coco/bbox_mAP_50: 0.7440  coco/bbox_mAP_75: 0.5140  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2750  coco/bbox_mAP_l: 0.5270  data_time: 0.0036  time: 0.0906
2023/12/02 20:40:31 - mmengine - INFO - Epoch(train)  [4][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:15:03  time: 0.2617  data_time: 0.0023  memory: 3779  grad_norm: 315.3311  loss: 5.6639  loss_cls: 0.2872  loss_bbox: 0.2742  loss_iou: 0.3659  d0.loss_cls: 0.4339  d0.loss_bbox: 0.2715  d0.loss_iou: 0.3667  d1.loss_cls: 0.3345  d1.loss_bbox: 0.2477  d1.loss_iou: 0.3516  d2.loss_cls: 0.3067  d2.loss_bbox: 0.2474  d2.loss_iou: 0.3460  d3.loss_cls: 0.2973  d3.loss_bbox: 0.2623  d3.loss_iou: 0.3590  d4.loss_cls: 0.2942  d4.loss_bbox: 0.2595  d4.loss_iou: 0.3584
2023/12/02 20:40:34 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:40:34 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/12/02 20:40:37 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:40:37 - mmengine - INFO - bbox_mAP_copypaste: 0.446 0.754 0.455 0.000 0.154 0.559
2023/12/02 20:40:37 - mmengine - INFO - Epoch(val) [4][13/13]    coco/bbox_mAP: 0.4460  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.4550  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1540  coco/bbox_mAP_l: 0.5590  data_time: 0.0044  time: 0.0913
2023/12/02 20:40:50 - mmengine - INFO - Epoch(train)  [5][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:14:13  time: 0.2663  data_time: 0.0023  memory: 3804  grad_norm: 366.8160  loss: 4.5396  loss_cls: 0.1250  loss_bbox: 0.2863  loss_iou: 0.3345  d0.loss_cls: 0.2566  d0.loss_bbox: 0.2591  d0.loss_iou: 0.3194  d1.loss_cls: 0.2149  d1.loss_bbox: 0.2459  d1.loss_iou: 0.3077  d2.loss_cls: 0.1472  d2.loss_bbox: 0.2610  d2.loss_iou: 0.3133  d3.loss_cls: 0.1319  d3.loss_bbox: 0.2706  d3.loss_iou: 0.3241  d4.loss_cls: 0.1262  d4.loss_bbox: 0.2820  d4.loss_iou: 0.3339
2023/12/02 20:40:53 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:40:53 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/12/02 20:40:55 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:40:55 - mmengine - INFO - bbox_mAP_copypaste: 0.532 0.826 0.665 0.000 0.388 0.612
2023/12/02 20:40:55 - mmengine - INFO - Epoch(val) [5][13/13]    coco/bbox_mAP: 0.5320  coco/bbox_mAP_50: 0.8260  coco/bbox_mAP_75: 0.6650  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3880  coco/bbox_mAP_l: 0.6120  data_time: 0.0033  time: 0.0897
2023/12/02 20:41:09 - mmengine - INFO - Epoch(train)  [6][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:13:35  time: 0.2711  data_time: 0.0026  memory: 3779  grad_norm: 437.4948  loss: 4.5525  loss_cls: 0.1266  loss_bbox: 0.2500  loss_iou: 0.3576  d0.loss_cls: 0.2897  d0.loss_bbox: 0.2356  d0.loss_iou: 0.3333  d1.loss_cls: 0.1727  d1.loss_bbox: 0.2323  d1.loss_iou: 0.3337  d2.loss_cls: 0.1414  d2.loss_bbox: 0.2462  d2.loss_iou: 0.3570  d3.loss_cls: 0.1266  d3.loss_bbox: 0.2556  d3.loss_iou: 0.3589  d4.loss_cls: 0.1266  d4.loss_bbox: 0.2509  d4.loss_iou: 0.3580
2023/12/02 20:41:12 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:41:12 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/12/02 20:41:14 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:41:14 - mmengine - INFO - bbox_mAP_copypaste: 0.485 0.807 0.499 0.000 0.309 0.568
2023/12/02 20:41:14 - mmengine - INFO - Epoch(val) [6][13/13]    coco/bbox_mAP: 0.4850  coco/bbox_mAP_50: 0.8070  coco/bbox_mAP_75: 0.4990  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3090  coco/bbox_mAP_l: 0.5680  data_time: 0.0031  time: 0.0901
2023/12/02 20:41:27 - mmengine - INFO - Epoch(train)  [7][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:13:03  time: 0.2680  data_time: 0.0024  memory: 3806  grad_norm: 941.3658  loss: 5.2719  loss_cls: 0.1647  loss_bbox: 0.2847  loss_iou: 0.3798  d0.loss_cls: 0.3304  d0.loss_bbox: 0.3004  d0.loss_iou: 0.3797  d1.loss_cls: 0.2430  d1.loss_bbox: 0.2884  d1.loss_iou: 0.3709  d2.loss_cls: 0.1821  d2.loss_bbox: 0.2927  d2.loss_iou: 0.3794  d3.loss_cls: 0.1775  d3.loss_bbox: 0.2843  d3.loss_iou: 0.3774  d4.loss_cls: 0.1681  d4.loss_bbox: 0.2883  d4.loss_iou: 0.3801
2023/12/02 20:41:31 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:41:31 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/12/02 20:41:33 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:41:33 - mmengine - INFO - bbox_mAP_copypaste: 0.542 0.818 0.710 0.000 0.420 0.613
2023/12/02 20:41:33 - mmengine - INFO - Epoch(val) [7][13/13]    coco/bbox_mAP: 0.5420  coco/bbox_mAP_50: 0.8180  coco/bbox_mAP_75: 0.7100  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4200  coco/bbox_mAP_l: 0.6130  data_time: 0.0034  time: 0.0900
2023/12/02 20:41:47 - mmengine - INFO - Epoch(train)  [8][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:12:38  time: 0.2779  data_time: 0.0021  memory: 3806  grad_norm: 539.7255  loss: 3.9484  loss_cls: 0.1046  loss_bbox: 0.2072  loss_iou: 0.3135  d0.loss_cls: 0.2090  d0.loss_bbox: 0.2221  d0.loss_iou: 0.3270  d1.loss_cls: 0.1443  d1.loss_bbox: 0.2141  d1.loss_iou: 0.3105  d2.loss_cls: 0.1187  d2.loss_bbox: 0.2131  d2.loss_iou: 0.3132  d3.loss_cls: 0.1095  d3.loss_bbox: 0.2095  d3.loss_iou: 0.3085  d4.loss_cls: 0.1040  d4.loss_bbox: 0.2068  d4.loss_iou: 0.3128
2023/12/02 20:41:50 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:41:50 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/12/02 20:41:53 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:41:53 - mmengine - INFO - bbox_mAP_copypaste: 0.560 0.829 0.629 0.000 0.197 0.693
2023/12/02 20:41:53 - mmengine - INFO - Epoch(val) [8][13/13]    coco/bbox_mAP: 0.5600  coco/bbox_mAP_50: 0.8290  coco/bbox_mAP_75: 0.6290  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1970  coco/bbox_mAP_l: 0.6930  data_time: 0.0031  time: 0.0899
2023/12/02 20:42:06 - mmengine - INFO - Epoch(train)  [9][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:12:14  time: 0.2682  data_time: 0.0021  memory: 3800  grad_norm: 513.6633  loss: 3.9178  loss_cls: 0.0778  loss_bbox: 0.2258  loss_iou: 0.3230  d0.loss_cls: 0.2033  d0.loss_bbox: 0.2157  d0.loss_iou: 0.3021  d1.loss_cls: 0.1528  d1.loss_bbox: 0.2202  d1.loss_iou: 0.3179  d2.loss_cls: 0.1001  d2.loss_bbox: 0.2230  d2.loss_iou: 0.3214  d3.loss_cls: 0.0829  d3.loss_bbox: 0.2152  d3.loss_iou: 0.3174  d4.loss_cls: 0.0780  d4.loss_bbox: 0.2227  d4.loss_iou: 0.3184
2023/12/02 20:42:09 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:42:09 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/12/02 20:42:11 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:42:11 - mmengine - INFO - bbox_mAP_copypaste: 0.436 0.848 0.301 0.000 0.243 0.518
2023/12/02 20:42:11 - mmengine - INFO - Epoch(val) [9][13/13]    coco/bbox_mAP: 0.4360  coco/bbox_mAP_50: 0.8480  coco/bbox_mAP_75: 0.3010  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.5180  data_time: 0.0032  time: 0.0910
2023/12/02 20:42:25 - mmengine - INFO - Epoch(train) [10][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:11:51  time: 0.2742  data_time: 0.0023  memory: 3804  grad_norm: 2555.1851  loss: 4.0304  loss_cls: 0.0789  loss_bbox: 0.2420  loss_iou: 0.3242  d0.loss_cls: 0.2044  d0.loss_bbox: 0.2258  d0.loss_iou: 0.3229  d1.loss_cls: 0.1252  d1.loss_bbox: 0.2301  d1.loss_iou: 0.3126  d2.loss_cls: 0.1144  d2.loss_bbox: 0.2363  d2.loss_iou: 0.3257  d3.loss_cls: 0.0865  d3.loss_bbox: 0.2416  d3.loss_iou: 0.3189  d4.loss_cls: 0.0816  d4.loss_bbox: 0.2380  d4.loss_iou: 0.3215
2023/12/02 20:42:28 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:42:28 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/12/02 20:42:30 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:42:31 - mmengine - INFO - bbox_mAP_copypaste: 0.536 0.852 0.611 0.000 0.273 0.635
2023/12/02 20:42:31 - mmengine - INFO - Epoch(val) [10][13/13]    coco/bbox_mAP: 0.5360  coco/bbox_mAP_50: 0.8520  coco/bbox_mAP_75: 0.6110  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2730  coco/bbox_mAP_l: 0.6350  data_time: 0.0031  time: 0.0920
2023/12/02 20:42:44 - mmengine - INFO - Epoch(train) [11][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:11:30  time: 0.2749  data_time: 0.0022  memory: 3804  grad_norm: 991.2308  loss: 4.7319  loss_cls: 0.1602  loss_bbox: 0.2369  loss_iou: 0.3503  d0.loss_cls: 0.2916  d0.loss_bbox: 0.2570  d0.loss_iou: 0.3619  d1.loss_cls: 0.2129  d1.loss_bbox: 0.2428  d1.loss_iou: 0.3435  d2.loss_cls: 0.1846  d2.loss_bbox: 0.2477  d2.loss_iou: 0.3514  d3.loss_cls: 0.1671  d3.loss_bbox: 0.2392  d3.loss_iou: 0.3504  d4.loss_cls: 0.1642  d4.loss_bbox: 0.2321  d4.loss_iou: 0.3382
2023/12/02 20:42:47 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:42:47 - mmengine - INFO - Saving checkpoint at 11 epochs
2023/12/02 20:42:50 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:42:50 - mmengine - INFO - bbox_mAP_copypaste: 0.416 0.644 0.514 0.000 0.068 0.544
2023/12/02 20:42:50 - mmengine - INFO - Epoch(val) [11][13/13]    coco/bbox_mAP: 0.4160  coco/bbox_mAP_50: 0.6440  coco/bbox_mAP_75: 0.5140  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0680  coco/bbox_mAP_l: 0.5440  data_time: 0.0037  time: 0.0941
2023/12/02 20:43:04 - mmengine - INFO - Epoch(train) [12][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:11:11  time: 0.2804  data_time: 0.0022  memory: 3505  grad_norm: 549.1624  loss: 4.2003  loss_cls: 0.1667  loss_bbox: 0.2088  loss_iou: 0.2889  d0.loss_cls: 0.3027  d0.loss_bbox: 0.2067  d0.loss_iou: 0.3067  d1.loss_cls: 0.2328  d1.loss_bbox: 0.2009  d1.loss_iou: 0.2817  d2.loss_cls: 0.1903  d2.loss_bbox: 0.2094  d2.loss_iou: 0.2919  d3.loss_cls: 0.1732  d3.loss_bbox: 0.2017  d3.loss_iou: 0.2825  d4.loss_cls: 0.1699  d4.loss_bbox: 0.2014  d4.loss_iou: 0.2840
2023/12/02 20:43:07 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:43:07 - mmengine - INFO - Saving checkpoint at 12 epochs
2023/12/02 20:43:10 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:43:10 - mmengine - INFO - bbox_mAP_copypaste: 0.409 0.733 0.433 0.000 0.055 0.552
2023/12/02 20:43:10 - mmengine - INFO - Epoch(val) [12][13/13]    coco/bbox_mAP: 0.4090  coco/bbox_mAP_50: 0.7330  coco/bbox_mAP_75: 0.4330  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0550  coco/bbox_mAP_l: 0.5520  data_time: 0.0031  time: 0.0964
2023/12/02 20:43:24 - mmengine - INFO - Epoch(train) [13][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:10:52  time: 0.2791  data_time: 0.0022  memory: 3806  grad_norm: 327.8245  loss: 4.5848  loss_cls: 0.1002  loss_bbox: 0.2738  loss_iou: 0.3733  d0.loss_cls: 0.2348  d0.loss_bbox: 0.2423  d0.loss_iou: 0.3300  d1.loss_cls: 0.1917  d1.loss_bbox: 0.2534  d1.loss_iou: 0.3582  d2.loss_cls: 0.1276  d2.loss_bbox: 0.2577  d2.loss_iou: 0.3614  d3.loss_cls: 0.1183  d3.loss_bbox: 0.2625  d3.loss_iou: 0.3648  d4.loss_cls: 0.1052  d4.loss_bbox: 0.2653  d4.loss_iou: 0.3643
2023/12/02 20:43:27 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:43:27 - mmengine - INFO - Saving checkpoint at 13 epochs
2023/12/02 20:43:30 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:43:30 - mmengine - INFO - bbox_mAP_copypaste: 0.526 0.810 0.608 0.006 0.286 0.617
2023/12/02 20:43:30 - mmengine - INFO - Epoch(val) [13][13/13]    coco/bbox_mAP: 0.5260  coco/bbox_mAP_50: 0.8100  coco/bbox_mAP_75: 0.6080  coco/bbox_mAP_s: 0.0060  coco/bbox_mAP_m: 0.2860  coco/bbox_mAP_l: 0.6170  data_time: 0.0039  time: 0.0997
2023/12/02 20:43:44 - mmengine - INFO - Epoch(train) [14][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:10:34  time: 0.2853  data_time: 0.0023  memory: 3918  grad_norm: 1668.0128  loss: 5.6471  loss_cls: 0.2018  loss_bbox: 0.2947  loss_iou: 0.4114  d0.loss_cls: 0.3104  d0.loss_bbox: 0.3074  d0.loss_iou: 0.4114  d1.loss_cls: 0.2386  d1.loss_bbox: 0.3074  d1.loss_iou: 0.4162  d2.loss_cls: 0.2084  d2.loss_bbox: 0.2956  d2.loss_iou: 0.4112  d3.loss_cls: 0.2035  d3.loss_bbox: 0.3004  d3.loss_iou: 0.4119  d4.loss_cls: 0.1945  d4.loss_bbox: 0.2995  d4.loss_iou: 0.4227
2023/12/02 20:43:47 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:43:47 - mmengine - INFO - Saving checkpoint at 14 epochs
2023/12/02 20:43:49 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:43:49 - mmengine - INFO - bbox_mAP_copypaste: 0.458 0.866 0.395 0.000 0.297 0.527
2023/12/02 20:43:49 - mmengine - INFO - Epoch(val) [14][13/13]    coco/bbox_mAP: 0.4580  coco/bbox_mAP_50: 0.8660  coco/bbox_mAP_75: 0.3950  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.5270  data_time: 0.0032  time: 0.1008
2023/12/02 20:44:04 - mmengine - INFO - Epoch(train) [15][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:10:16  time: 0.2837  data_time: 0.0023  memory: 3806  grad_norm: 258.9739  loss: 3.5890  loss_cls: 0.0492  loss_bbox: 0.2305  loss_iou: 0.2762  d0.loss_cls: 0.1952  d0.loss_bbox: 0.2203  d0.loss_iou: 0.2877  d1.loss_cls: 0.0993  d1.loss_bbox: 0.2365  d1.loss_iou: 0.2823  d2.loss_cls: 0.0609  d2.loss_bbox: 0.2396  d2.loss_iou: 0.2829  d3.loss_cls: 0.0520  d3.loss_bbox: 0.2359  d3.loss_iou: 0.2805  d4.loss_cls: 0.0494  d4.loss_bbox: 0.2319  d4.loss_iou: 0.2788
2023/12/02 20:44:07 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:44:07 - mmengine - INFO - Saving checkpoint at 15 epochs
2023/12/02 20:44:09 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:44:09 - mmengine - INFO - bbox_mAP_copypaste: 0.485 0.803 0.559 0.000 0.234 0.585
2023/12/02 20:44:09 - mmengine - INFO - Epoch(val) [15][13/13]    coco/bbox_mAP: 0.4850  coco/bbox_mAP_50: 0.8030  coco/bbox_mAP_75: 0.5590  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2340  coco/bbox_mAP_l: 0.5850  data_time: 0.0032  time: 0.1021
2023/12/02 20:44:24 - mmengine - INFO - Epoch(train) [16][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:09:58  time: 0.2830  data_time: 0.0024  memory: 3808  grad_norm: 441.3544  loss: 4.0833  loss_cls: 0.1024  loss_bbox: 0.2234  loss_iou: 0.3289  d0.loss_cls: 0.2242  d0.loss_bbox: 0.2365  d0.loss_iou: 0.3158  d1.loss_cls: 0.1549  d1.loss_bbox: 0.2199  d1.loss_iou: 0.3167  d2.loss_cls: 0.1221  d2.loss_bbox: 0.2252  d2.loss_iou: 0.3255  d3.loss_cls: 0.1003  d3.loss_bbox: 0.2234  d3.loss_iou: 0.3208  d4.loss_cls: 0.0983  d4.loss_bbox: 0.2214  d4.loss_iou: 0.3234
2023/12/02 20:44:27 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:44:27 - mmengine - INFO - Saving checkpoint at 16 epochs
2023/12/02 20:44:29 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:44:29 - mmengine - INFO - bbox_mAP_copypaste: 0.518 0.833 0.582 0.000 0.295 0.611
2023/12/02 20:44:29 - mmengine - INFO - Epoch(val) [16][13/13]    coco/bbox_mAP: 0.5180  coco/bbox_mAP_50: 0.8330  coco/bbox_mAP_75: 0.5820  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2950  coco/bbox_mAP_l: 0.6110  data_time: 0.0031  time: 0.0978
2023/12/02 20:44:36 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:44:42 - mmengine - INFO - Epoch(train) [17][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:09:38  time: 0.2639  data_time: 0.0030  memory: 3918  grad_norm: 329.8686  loss: 3.9138  loss_cls: 0.1213  loss_bbox: 0.2097  loss_iou: 0.3104  d0.loss_cls: 0.2226  d0.loss_bbox: 0.2122  d0.loss_iou: 0.3100  d1.loss_cls: 0.1579  d1.loss_bbox: 0.1953  d1.loss_iou: 0.3044  d2.loss_cls: 0.1264  d2.loss_bbox: 0.1990  d2.loss_iou: 0.2999  d3.loss_cls: 0.1145  d3.loss_bbox: 0.1996  d3.loss_iou: 0.2994  d4.loss_cls: 0.1162  d4.loss_bbox: 0.2046  d4.loss_iou: 0.3105
2023/12/02 20:44:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:44:45 - mmengine - INFO - Saving checkpoint at 17 epochs
2023/12/02 20:44:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:44:48 - mmengine - INFO - bbox_mAP_copypaste: 0.480 0.747 0.606 0.000 0.221 0.594
2023/12/02 20:44:48 - mmengine - INFO - Epoch(val) [17][13/13]    coco/bbox_mAP: 0.4800  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.6060  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2210  coco/bbox_mAP_l: 0.5940  data_time: 0.0034  time: 0.1024
2023/12/02 20:45:03 - mmengine - INFO - Epoch(train) [18][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:09:21  time: 0.2886  data_time: 0.0031  memory: 3779  grad_norm: 342.1131  loss: 3.5764  loss_cls: 0.1067  loss_bbox: 0.1835  loss_iou: 0.2745  d0.loss_cls: 0.2451  d0.loss_bbox: 0.1849  d0.loss_iou: 0.2759  d1.loss_cls: 0.1776  d1.loss_bbox: 0.1756  d1.loss_iou: 0.2590  d2.loss_cls: 0.1270  d2.loss_bbox: 0.1806  d2.loss_iou: 0.2681  d3.loss_cls: 0.1168  d3.loss_bbox: 0.1802  d3.loss_iou: 0.2664  d4.loss_cls: 0.1118  d4.loss_bbox: 0.1770  d4.loss_iou: 0.2660
2023/12/02 20:45:06 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:45:06 - mmengine - INFO - Saving checkpoint at 18 epochs
2023/12/02 20:45:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:45:08 - mmengine - INFO - bbox_mAP_copypaste: 0.448 0.739 0.516 0.000 0.085 0.595
2023/12/02 20:45:08 - mmengine - INFO - Epoch(val) [18][13/13]    coco/bbox_mAP: 0.4480  coco/bbox_mAP_50: 0.7390  coco/bbox_mAP_75: 0.5160  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0850  coco/bbox_mAP_l: 0.5950  data_time: 0.0031  time: 0.1004
2023/12/02 20:45:22 - mmengine - INFO - Epoch(train) [19][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:09:02  time: 0.2808  data_time: 0.0025  memory: 3808  grad_norm: 314.0417  loss: 3.3849  loss_cls: 0.0712  loss_bbox: 0.1857  loss_iou: 0.2789  d0.loss_cls: 0.1958  d0.loss_bbox: 0.1773  d0.loss_iou: 0.2741  d1.loss_cls: 0.1385  d1.loss_bbox: 0.1736  d1.loss_iou: 0.2619  d2.loss_cls: 0.0949  d2.loss_bbox: 0.1823  d2.loss_iou: 0.2727  d3.loss_cls: 0.0746  d3.loss_bbox: 0.1860  d3.loss_iou: 0.2780  d4.loss_cls: 0.0694  d4.loss_bbox: 0.1894  d4.loss_iou: 0.2805
2023/12/02 20:45:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:45:25 - mmengine - INFO - Saving checkpoint at 19 epochs
2023/12/02 20:45:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:45:28 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.845 0.402 0.000 0.203 0.556
2023/12/02 20:45:28 - mmengine - INFO - Epoch(val) [19][13/13]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.8450  coco/bbox_mAP_75: 0.4020  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2030  coco/bbox_mAP_l: 0.5560  data_time: 0.0038  time: 0.1007
2023/12/02 20:45:42 - mmengine - INFO - Epoch(train) [20][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:08:45  time: 0.2881  data_time: 0.0024  memory: 3918  grad_norm: 301.9743  loss: 4.0630  loss_cls: 0.0824  loss_bbox: 0.2463  loss_iou: 0.3138  d0.loss_cls: 0.1920  d0.loss_bbox: 0.2623  d0.loss_iou: 0.3236  d1.loss_cls: 0.1285  d1.loss_bbox: 0.2514  d1.loss_iou: 0.3152  d2.loss_cls: 0.0951  d2.loss_bbox: 0.2512  d2.loss_iou: 0.3154  d3.loss_cls: 0.0863  d3.loss_bbox: 0.2416  d3.loss_iou: 0.3159  d4.loss_cls: 0.0833  d4.loss_bbox: 0.2446  d4.loss_iou: 0.3139
2023/12/02 20:45:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:45:45 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/12/02 20:45:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:45:48 - mmengine - INFO - bbox_mAP_copypaste: 0.436 0.736 0.498 0.000 0.124 0.565
2023/12/02 20:45:48 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.4360  coco/bbox_mAP_50: 0.7360  coco/bbox_mAP_75: 0.4980  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1240  coco/bbox_mAP_l: 0.5650  data_time: 0.0032  time: 0.1017
2023/12/02 20:46:02 - mmengine - INFO - Epoch(train) [21][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:08:28  time: 0.2877  data_time: 0.0032  memory: 3624  grad_norm: 488.8100  loss: 3.6782  loss_cls: 0.0841  loss_bbox: 0.1905  loss_iou: 0.3014  d0.loss_cls: 0.2003  d0.loss_bbox: 0.2046  d0.loss_iou: 0.3301  d1.loss_cls: 0.1313  d1.loss_bbox: 0.1857  d1.loss_iou: 0.2942  d2.loss_cls: 0.1115  d2.loss_bbox: 0.1883  d2.loss_iou: 0.3052  d3.loss_cls: 0.0888  d3.loss_bbox: 0.1891  d3.loss_iou: 0.3022  d4.loss_cls: 0.0833  d4.loss_bbox: 0.1857  d4.loss_iou: 0.3018
2023/12/02 20:46:06 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:46:06 - mmengine - INFO - Saving checkpoint at 21 epochs
2023/12/02 20:46:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:46:08 - mmengine - INFO - bbox_mAP_copypaste: 0.500 0.855 0.550 0.000 0.328 0.582
2023/12/02 20:46:08 - mmengine - INFO - Epoch(val) [21][13/13]    coco/bbox_mAP: 0.5000  coco/bbox_mAP_50: 0.8550  coco/bbox_mAP_75: 0.5500  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3280  coco/bbox_mAP_l: 0.5820  data_time: 0.0045  time: 0.1034
2023/12/02 20:46:22 - mmengine - INFO - Epoch(train) [22][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:08:10  time: 0.2822  data_time: 0.0025  memory: 3511  grad_norm: 580.5156  loss: 3.5475  loss_cls: 0.0614  loss_bbox: 0.2029  loss_iou: 0.2991  d0.loss_cls: 0.1968  d0.loss_bbox: 0.1924  d0.loss_iou: 0.2871  d1.loss_cls: 0.1279  d1.loss_bbox: 0.1835  d1.loss_iou: 0.2802  d2.loss_cls: 0.0902  d2.loss_bbox: 0.1956  d2.loss_iou: 0.2929  d3.loss_cls: 0.0679  d3.loss_bbox: 0.2066  d3.loss_iou: 0.3020  d4.loss_cls: 0.0611  d4.loss_bbox: 0.2011  d4.loss_iou: 0.2987
2023/12/02 20:46:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:46:25 - mmengine - INFO - Saving checkpoint at 22 epochs
2023/12/02 20:46:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:46:28 - mmengine - INFO - bbox_mAP_copypaste: 0.467 0.855 0.518 0.000 0.204 0.586
2023/12/02 20:46:28 - mmengine - INFO - Epoch(val) [22][13/13]    coco/bbox_mAP: 0.4670  coco/bbox_mAP_50: 0.8550  coco/bbox_mAP_75: 0.5180  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2040  coco/bbox_mAP_l: 0.5860  data_time: 0.0044  time: 0.1039
2023/12/02 20:46:41 - mmengine - INFO - Epoch(train) [23][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:07:51  time: 0.2690  data_time: 0.0025  memory: 3806  grad_norm: 629.5596  loss: 3.8097  loss_cls: 0.0552  loss_bbox: 0.2422  loss_iou: 0.3036  d0.loss_cls: 0.2039  d0.loss_bbox: 0.2299  d0.loss_iou: 0.3039  d1.loss_cls: 0.1067  d1.loss_bbox: 0.2343  d1.loss_iou: 0.2959  d2.loss_cls: 0.1037  d2.loss_bbox: 0.2448  d2.loss_iou: 0.3017  d3.loss_cls: 0.0498  d3.loss_bbox: 0.2435  d3.loss_iou: 0.3010  d4.loss_cls: 0.0526  d4.loss_bbox: 0.2400  d4.loss_iou: 0.2972
2023/12/02 20:46:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:46:45 - mmengine - INFO - Saving checkpoint at 23 epochs
2023/12/02 20:46:47 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:46:47 - mmengine - INFO - bbox_mAP_copypaste: 0.527 0.870 0.564 0.000 0.233 0.656
2023/12/02 20:46:47 - mmengine - INFO - Epoch(val) [23][13/13]    coco/bbox_mAP: 0.5270  coco/bbox_mAP_50: 0.8700  coco/bbox_mAP_75: 0.5640  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2330  coco/bbox_mAP_l: 0.6560  data_time: 0.0031  time: 0.0989
2023/12/02 20:47:01 - mmengine - INFO - Epoch(train) [24][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:07:34  time: 0.2823  data_time: 0.0023  memory: 3918  grad_norm: 494.8096  loss: 4.1672  loss_cls: 0.1261  loss_bbox: 0.2084  loss_iou: 0.3181  d0.loss_cls: 0.2426  d0.loss_bbox: 0.2182  d0.loss_iou: 0.3445  d1.loss_cls: 0.1970  d1.loss_bbox: 0.2008  d1.loss_iou: 0.3214  d2.loss_cls: 0.1658  d2.loss_bbox: 0.1957  d2.loss_iou: 0.3187  d3.loss_cls: 0.1359  d3.loss_bbox: 0.2027  d3.loss_iou: 0.3239  d4.loss_cls: 0.1305  d4.loss_bbox: 0.1998  d4.loss_iou: 0.3171
2023/12/02 20:47:04 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:47:04 - mmengine - INFO - Saving checkpoint at 24 epochs
2023/12/02 20:47:07 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:47:07 - mmengine - INFO - bbox_mAP_copypaste: 0.390 0.713 0.422 0.000 0.199 0.476
2023/12/02 20:47:07 - mmengine - INFO - Epoch(val) [24][13/13]    coco/bbox_mAP: 0.3900  coco/bbox_mAP_50: 0.7130  coco/bbox_mAP_75: 0.4220  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1990  coco/bbox_mAP_l: 0.4760  data_time: 0.0032  time: 0.1040
2023/12/02 20:47:22 - mmengine - INFO - Epoch(train) [25][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:07:17  time: 0.2943  data_time: 0.0029  memory: 3918  grad_norm: 472.2276  loss: 4.0113  loss_cls: 0.0887  loss_bbox: 0.2272  loss_iou: 0.3065  d0.loss_cls: 0.2744  d0.loss_bbox: 0.2144  d0.loss_iou: 0.2836  d1.loss_cls: 0.1869  d1.loss_bbox: 0.2453  d1.loss_iou: 0.2964  d2.loss_cls: 0.1667  d2.loss_bbox: 0.2297  d2.loss_iou: 0.2947  d3.loss_cls: 0.0943  d3.loss_bbox: 0.2165  d3.loss_iou: 0.2886  d4.loss_cls: 0.0859  d4.loss_bbox: 0.2179  d4.loss_iou: 0.2935
2023/12/02 20:47:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:47:25 - mmengine - INFO - Saving checkpoint at 25 epochs
2023/12/02 20:47:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:47:28 - mmengine - INFO - bbox_mAP_copypaste: 0.504 0.791 0.579 0.000 0.213 0.613
2023/12/02 20:47:28 - mmengine - INFO - Epoch(val) [25][13/13]    coco/bbox_mAP: 0.5040  coco/bbox_mAP_50: 0.7910  coco/bbox_mAP_75: 0.5790  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2130  coco/bbox_mAP_l: 0.6130  data_time: 0.0031  time: 0.1040
2023/12/02 20:47:42 - mmengine - INFO - Epoch(train) [26][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:07:00  time: 0.2860  data_time: 0.0024  memory: 3808  grad_norm: 389.3227  loss: 3.6786  loss_cls: 0.0838  loss_bbox: 0.2046  loss_iou: 0.2996  d0.loss_cls: 0.1688  d0.loss_bbox: 0.2232  d0.loss_iou: 0.3082  d1.loss_cls: 0.1184  d1.loss_bbox: 0.2010  d1.loss_iou: 0.2919  d2.loss_cls: 0.0863  d2.loss_bbox: 0.2073  d2.loss_iou: 0.3020  d3.loss_cls: 0.0853  d3.loss_bbox: 0.2115  d3.loss_iou: 0.3038  d4.loss_cls: 0.0828  d4.loss_bbox: 0.2046  d4.loss_iou: 0.2955
2023/12/02 20:47:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:47:45 - mmengine - INFO - Saving checkpoint at 26 epochs
2023/12/02 20:47:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:47:48 - mmengine - INFO - bbox_mAP_copypaste: 0.527 0.762 0.548 0.000 0.171 0.664
2023/12/02 20:47:48 - mmengine - INFO - Epoch(val) [26][13/13]    coco/bbox_mAP: 0.5270  coco/bbox_mAP_50: 0.7620  coco/bbox_mAP_75: 0.5480  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1710  coco/bbox_mAP_l: 0.6640  data_time: 0.0031  time: 0.1009
2023/12/02 20:48:02 - mmengine - INFO - Epoch(train) [27][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:06:43  time: 0.2843  data_time: 0.0024  memory: 3808  grad_norm: 311.1637  loss: 3.5951  loss_cls: 0.0648  loss_bbox: 0.1975  loss_iou: 0.3004  d0.loss_cls: 0.2097  d0.loss_bbox: 0.2008  d0.loss_iou: 0.2854  d1.loss_cls: 0.1254  d1.loss_bbox: 0.1986  d1.loss_iou: 0.2902  d2.loss_cls: 0.1104  d2.loss_bbox: 0.1955  d2.loss_iou: 0.2920  d3.loss_cls: 0.0757  d3.loss_bbox: 0.1955  d3.loss_iou: 0.2957  d4.loss_cls: 0.0652  d4.loss_bbox: 0.1957  d4.loss_iou: 0.2965
2023/12/02 20:48:05 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:48:05 - mmengine - INFO - Saving checkpoint at 27 epochs
2023/12/02 20:48:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:48:08 - mmengine - INFO - bbox_mAP_copypaste: 0.544 0.821 0.563 0.000 0.241 0.660
2023/12/02 20:48:08 - mmengine - INFO - Epoch(val) [27][13/13]    coco/bbox_mAP: 0.5440  coco/bbox_mAP_50: 0.8210  coco/bbox_mAP_75: 0.5630  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2410  coco/bbox_mAP_l: 0.6600  data_time: 0.0059  time: 0.1032
2023/12/02 20:48:22 - mmengine - INFO - Epoch(train) [28][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:06:25  time: 0.2905  data_time: 0.0026  memory: 3806  grad_norm: 303.2628  loss: 3.9220  loss_cls: 0.1123  loss_bbox: 0.2137  loss_iou: 0.2912  d0.loss_cls: 0.2609  d0.loss_bbox: 0.1952  d0.loss_iou: 0.2851  d1.loss_cls: 0.1734  d1.loss_bbox: 0.2089  d1.loss_iou: 0.3035  d2.loss_cls: 0.1369  d2.loss_bbox: 0.2190  d2.loss_iou: 0.3044  d3.loss_cls: 0.1066  d3.loss_bbox: 0.2090  d3.loss_iou: 0.2962  d4.loss_cls: 0.1064  d4.loss_bbox: 0.2104  d4.loss_iou: 0.2890
2023/12/02 20:48:26 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:48:26 - mmengine - INFO - Saving checkpoint at 28 epochs
2023/12/02 20:48:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:48:28 - mmengine - INFO - bbox_mAP_copypaste: 0.461 0.764 0.475 0.000 0.089 0.599
2023/12/02 20:48:28 - mmengine - INFO - Epoch(val) [28][13/13]    coco/bbox_mAP: 0.4610  coco/bbox_mAP_50: 0.7640  coco/bbox_mAP_75: 0.4750  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.0890  coco/bbox_mAP_l: 0.5990  data_time: 0.0044  time: 0.1054
2023/12/02 20:48:43 - mmengine - INFO - Epoch(train) [29][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:06:08  time: 0.2890  data_time: 0.0024  memory: 3779  grad_norm: 598.1196  loss: 3.8712  loss_cls: 0.0851  loss_bbox: 0.2196  loss_iou: 0.3011  d0.loss_cls: 0.1903  d0.loss_bbox: 0.2318  d0.loss_iou: 0.3048  d1.loss_cls: 0.1589  d1.loss_bbox: 0.2161  d1.loss_iou: 0.2952  d2.loss_cls: 0.1100  d2.loss_bbox: 0.2196  d2.loss_iou: 0.3004  d3.loss_cls: 0.0881  d3.loss_bbox: 0.2304  d3.loss_iou: 0.3051  d4.loss_cls: 0.0856  d4.loss_bbox: 0.2235  d4.loss_iou: 0.3055
2023/12/02 20:48:46 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:48:46 - mmengine - INFO - Saving checkpoint at 29 epochs
2023/12/02 20:48:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:48:48 - mmengine - INFO - bbox_mAP_copypaste: 0.550 0.830 0.649 0.000 0.296 0.650
2023/12/02 20:48:48 - mmengine - INFO - Epoch(val) [29][13/13]    coco/bbox_mAP: 0.5500  coco/bbox_mAP_50: 0.8300  coco/bbox_mAP_75: 0.6490  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2960  coco/bbox_mAP_l: 0.6500  data_time: 0.0035  time: 0.1035
2023/12/02 20:49:03 - mmengine - INFO - Epoch(train) [30][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:05:51  time: 0.2846  data_time: 0.0031  memory: 3779  grad_norm: 894.3729  loss: 4.2450  loss_cls: 0.1410  loss_bbox: 0.2110  loss_iou: 0.3198  d0.loss_cls: 0.3032  d0.loss_bbox: 0.2024  d0.loss_iou: 0.3017  d1.loss_cls: 0.2437  d1.loss_bbox: 0.1840  d1.loss_iou: 0.2905  d2.loss_cls: 0.2104  d2.loss_bbox: 0.1991  d2.loss_iou: 0.3079  d3.loss_cls: 0.1400  d3.loss_bbox: 0.2103  d3.loss_iou: 0.3182  d4.loss_cls: 0.1403  d4.loss_bbox: 0.2100  d4.loss_iou: 0.3112
2023/12/02 20:49:06 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:49:06 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/12/02 20:49:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:49:08 - mmengine - INFO - bbox_mAP_copypaste: 0.542 0.800 0.606 0.000 0.200 0.664
2023/12/02 20:49:08 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.5420  coco/bbox_mAP_50: 0.8000  coco/bbox_mAP_75: 0.6060  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2000  coco/bbox_mAP_l: 0.6640  data_time: 0.0043  time: 0.1024
2023/12/02 20:49:22 - mmengine - INFO - Epoch(train) [31][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:05:33  time: 0.2838  data_time: 0.0029  memory: 3850  grad_norm: 586.6438  loss: 4.0440  loss_cls: 0.1397  loss_bbox: 0.1904  loss_iou: 0.2925  d0.loss_cls: 0.3012  d0.loss_bbox: 0.2237  d0.loss_iou: 0.3165  d1.loss_cls: 0.1938  d1.loss_bbox: 0.1931  d1.loss_iou: 0.3016  d2.loss_cls: 0.1653  d2.loss_bbox: 0.1953  d2.loss_iou: 0.2840  d3.loss_cls: 0.1373  d3.loss_bbox: 0.1976  d3.loss_iou: 0.2908  d4.loss_cls: 0.1278  d4.loss_bbox: 0.1961  d4.loss_iou: 0.2971
2023/12/02 20:49:26 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:49:26 - mmengine - INFO - Saving checkpoint at 31 epochs
2023/12/02 20:49:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:49:28 - mmengine - INFO - bbox_mAP_copypaste: 0.581 0.873 0.645 0.000 0.297 0.694
2023/12/02 20:49:28 - mmengine - INFO - Epoch(val) [31][13/13]    coco/bbox_mAP: 0.5810  coco/bbox_mAP_50: 0.8730  coco/bbox_mAP_75: 0.6450  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.6940  data_time: 0.0036  time: 0.1012
2023/12/02 20:49:42 - mmengine - INFO - Epoch(train) [32][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:05:16  time: 0.2741  data_time: 0.0026  memory: 3779  grad_norm: 428.6830  loss: 3.2698  loss_cls: 0.0500  loss_bbox: 0.1890  loss_iou: 0.2561  d0.loss_cls: 0.1989  d0.loss_bbox: 0.2181  d0.loss_iou: 0.2720  d1.loss_cls: 0.1267  d1.loss_bbox: 0.1923  d1.loss_iou: 0.2603  d2.loss_cls: 0.0699  d2.loss_bbox: 0.1876  d2.loss_iou: 0.2580  d3.loss_cls: 0.0504  d3.loss_bbox: 0.1917  d3.loss_iou: 0.2570  d4.loss_cls: 0.0496  d4.loss_bbox: 0.1874  d4.loss_iou: 0.2550
2023/12/02 20:49:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:49:45 - mmengine - INFO - Saving checkpoint at 32 epochs
2023/12/02 20:49:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:49:48 - mmengine - INFO - bbox_mAP_copypaste: 0.531 0.816 0.626 0.000 0.297 0.634
2023/12/02 20:49:48 - mmengine - INFO - Epoch(val) [32][13/13]    coco/bbox_mAP: 0.5310  coco/bbox_mAP_50: 0.8160  coco/bbox_mAP_75: 0.6260  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2970  coco/bbox_mAP_l: 0.6340  data_time: 0.0032  time: 0.1016
2023/12/02 20:50:01 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:50:02 - mmengine - INFO - Epoch(train) [33][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:04:58  time: 0.2774  data_time: 0.0026  memory: 3730  grad_norm: 977.5564  loss: 4.1416  loss_cls: 0.1013  loss_bbox: 0.2180  loss_iou: 0.3343  d0.loss_cls: 0.2235  d0.loss_bbox: 0.2301  d0.loss_iou: 0.3472  d1.loss_cls: 0.1769  d1.loss_bbox: 0.2175  d1.loss_iou: 0.3243  d2.loss_cls: 0.1305  d2.loss_bbox: 0.2202  d2.loss_iou: 0.3328  d3.loss_cls: 0.0989  d3.loss_bbox: 0.2109  d3.loss_iou: 0.3303  d4.loss_cls: 0.1013  d4.loss_bbox: 0.2118  d4.loss_iou: 0.3315
2023/12/02 20:50:05 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:50:05 - mmengine - INFO - Saving checkpoint at 33 epochs
2023/12/02 20:50:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:50:08 - mmengine - INFO - bbox_mAP_copypaste: 0.530 0.809 0.589 0.000 0.239 0.661
2023/12/02 20:50:08 - mmengine - INFO - Epoch(val) [33][13/13]    coco/bbox_mAP: 0.5300  coco/bbox_mAP_50: 0.8090  coco/bbox_mAP_75: 0.5890  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2390  coco/bbox_mAP_l: 0.6610  data_time: 0.0034  time: 0.1020
2023/12/02 20:50:22 - mmengine - INFO - Epoch(train) [34][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:04:41  time: 0.2799  data_time: 0.0032  memory: 3803  grad_norm: 1101.5194  loss: 3.4495  loss_cls: 0.0419  loss_bbox: 0.2042  loss_iou: 0.2855  d0.loss_cls: 0.1335  d0.loss_bbox: 0.2269  d0.loss_iou: 0.3044  d1.loss_cls: 0.1118  d1.loss_bbox: 0.2002  d1.loss_iou: 0.2850  d2.loss_cls: 0.0808  d2.loss_bbox: 0.2153  d2.loss_iou: 0.2934  d3.loss_cls: 0.0478  d3.loss_bbox: 0.2015  d3.loss_iou: 0.2859  d4.loss_cls: 0.0443  d4.loss_bbox: 0.2011  d4.loss_iou: 0.2858
2023/12/02 20:50:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:50:25 - mmengine - INFO - Saving checkpoint at 34 epochs
2023/12/02 20:50:28 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:50:28 - mmengine - INFO - bbox_mAP_copypaste: 0.540 0.815 0.579 0.000 0.243 0.668
2023/12/02 20:50:28 - mmengine - INFO - Epoch(val) [34][13/13]    coco/bbox_mAP: 0.5400  coco/bbox_mAP_50: 0.8150  coco/bbox_mAP_75: 0.5790  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2430  coco/bbox_mAP_l: 0.6680  data_time: 0.0031  time: 0.1033
2023/12/02 20:50:42 - mmengine - INFO - Epoch(train) [35][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:04:23  time: 0.2888  data_time: 0.0027  memory: 3806  grad_norm: 375.1090  loss: 3.7979  loss_cls: 0.0459  loss_bbox: 0.2386  loss_iou: 0.3135  d0.loss_cls: 0.2369  d0.loss_bbox: 0.2226  d0.loss_iou: 0.2871  d1.loss_cls: 0.0989  d1.loss_bbox: 0.2410  d1.loss_iou: 0.3024  d2.loss_cls: 0.0794  d2.loss_bbox: 0.2291  d2.loss_iou: 0.3045  d3.loss_cls: 0.0530  d3.loss_bbox: 0.2392  d3.loss_iou: 0.3108  d4.loss_cls: 0.0498  d4.loss_bbox: 0.2346  d4.loss_iou: 0.3107
2023/12/02 20:50:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:50:46 - mmengine - INFO - Saving checkpoint at 35 epochs
2023/12/02 20:50:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:50:48 - mmengine - INFO - bbox_mAP_copypaste: 0.554 0.812 0.618 0.000 0.289 0.672
2023/12/02 20:50:48 - mmengine - INFO - Epoch(val) [35][13/13]    coco/bbox_mAP: 0.5540  coco/bbox_mAP_50: 0.8120  coco/bbox_mAP_75: 0.6180  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2890  coco/bbox_mAP_l: 0.6720  data_time: 0.0031  time: 0.1036
2023/12/02 20:51:02 - mmengine - INFO - Epoch(train) [36][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:04:06  time: 0.2785  data_time: 0.0026  memory: 3834  grad_norm: 499.8460  loss: 3.7275  loss_cls: 0.0763  loss_bbox: 0.2168  loss_iou: 0.2988  d0.loss_cls: 0.1652  d0.loss_bbox: 0.2207  d0.loss_iou: 0.3067  d1.loss_cls: 0.1054  d1.loss_bbox: 0.2264  d1.loss_iou: 0.3147  d2.loss_cls: 0.0884  d2.loss_bbox: 0.2212  d2.loss_iou: 0.3099  d3.loss_cls: 0.0663  d3.loss_bbox: 0.2191  d3.loss_iou: 0.3027  d4.loss_cls: 0.0730  d4.loss_bbox: 0.2173  d4.loss_iou: 0.2987
2023/12/02 20:51:05 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:51:05 - mmengine - INFO - Saving checkpoint at 36 epochs
2023/12/02 20:51:08 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:51:08 - mmengine - INFO - bbox_mAP_copypaste: 0.445 0.670 0.508 0.005 0.033 0.640
2023/12/02 20:51:08 - mmengine - INFO - Epoch(val) [36][13/13]    coco/bbox_mAP: 0.4450  coco/bbox_mAP_50: 0.6700  coco/bbox_mAP_75: 0.5080  coco/bbox_mAP_s: 0.0050  coco/bbox_mAP_m: 0.0330  coco/bbox_mAP_l: 0.6400  data_time: 0.0031  time: 0.1001
2023/12/02 20:51:22 - mmengine - INFO - Epoch(train) [37][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:03:48  time: 0.2761  data_time: 0.0033  memory: 3779  grad_norm: 395.5326  loss: 3.4626  loss_cls: 0.0737  loss_bbox: 0.2002  loss_iou: 0.2620  d0.loss_cls: 0.1639  d0.loss_bbox: 0.2126  d0.loss_iou: 0.2903  d1.loss_cls: 0.1342  d1.loss_bbox: 0.2091  d1.loss_iou: 0.2859  d2.loss_cls: 0.1035  d2.loss_bbox: 0.1933  d2.loss_iou: 0.2609  d3.loss_cls: 0.0832  d3.loss_bbox: 0.1938  d3.loss_iou: 0.2588  d4.loss_cls: 0.0759  d4.loss_bbox: 0.1979  d4.loss_iou: 0.2634
2023/12/02 20:51:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:51:25 - mmengine - INFO - Saving checkpoint at 37 epochs
2023/12/02 20:51:27 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:51:27 - mmengine - INFO - bbox_mAP_copypaste: 0.495 0.809 0.508 0.000 0.242 0.599
2023/12/02 20:51:27 - mmengine - INFO - Epoch(val) [37][13/13]    coco/bbox_mAP: 0.4950  coco/bbox_mAP_50: 0.8090  coco/bbox_mAP_75: 0.5080  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.2420  coco/bbox_mAP_l: 0.5990  data_time: 0.0032  time: 0.0995
2023/12/02 20:51:41 - mmengine - INFO - Epoch(train) [38][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:03:31  time: 0.2821  data_time: 0.0026  memory: 3808  grad_norm: 388.8261  loss: 3.5495  loss_cls: 0.0851  loss_bbox: 0.1897  loss_iou: 0.2722  d0.loss_cls: 0.2015  d0.loss_bbox: 0.2154  d0.loss_iou: 0.2954  d1.loss_cls: 0.1438  d1.loss_bbox: 0.1978  d1.loss_iou: 0.2791  d2.loss_cls: 0.1069  d2.loss_bbox: 0.1983  d2.loss_iou: 0.2818  d3.loss_cls: 0.0732  d3.loss_bbox: 0.1912  d3.loss_iou: 0.2801  d4.loss_cls: 0.0752  d4.loss_bbox: 0.1884  d4.loss_iou: 0.2743
2023/12/02 20:51:44 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:51:44 - mmengine - INFO - Saving checkpoint at 38 epochs
2023/12/02 20:51:47 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:51:47 - mmengine - INFO - bbox_mAP_copypaste: 0.515 0.772 0.653 0.000 0.307 0.615
2023/12/02 20:51:47 - mmengine - INFO - Epoch(val) [38][13/13]    coco/bbox_mAP: 0.5150  coco/bbox_mAP_50: 0.7720  coco/bbox_mAP_75: 0.6530  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3070  coco/bbox_mAP_l: 0.6150  data_time: 0.0031  time: 0.1000
2023/12/02 20:52:00 - mmengine - INFO - Epoch(train) [39][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:03:13  time: 0.2721  data_time: 0.0027  memory: 3505  grad_norm: 375.4868  loss: 3.0578  loss_cls: 0.0523  loss_bbox: 0.1600  loss_iou: 0.2570  d0.loss_cls: 0.1586  d0.loss_bbox: 0.1912  d0.loss_iou: 0.2788  d1.loss_cls: 0.1196  d1.loss_bbox: 0.1598  d1.loss_iou: 0.2465  d2.loss_cls: 0.0857  d2.loss_bbox: 0.1605  d2.loss_iou: 0.2508  d3.loss_cls: 0.0572  d3.loss_bbox: 0.1568  d3.loss_iou: 0.2521  d4.loss_cls: 0.0522  d4.loss_bbox: 0.1631  d4.loss_iou: 0.2557
2023/12/02 20:52:03 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:52:03 - mmengine - INFO - Saving checkpoint at 39 epochs
2023/12/02 20:52:06 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:52:06 - mmengine - INFO - bbox_mAP_copypaste: 0.520 0.796 0.568 0.000 0.196 0.666
2023/12/02 20:52:06 - mmengine - INFO - Epoch(val) [39][13/13]    coco/bbox_mAP: 0.5200  coco/bbox_mAP_50: 0.7960  coco/bbox_mAP_75: 0.5680  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1960  coco/bbox_mAP_l: 0.6660  data_time: 0.0034  time: 0.1002
2023/12/02 20:52:20 - mmengine - INFO - Epoch(train) [40][50/61]  base_lr: 2.0000e-04 lr: 2.0000e-04  eta: 0:02:56  time: 0.2765  data_time: 0.0030  memory: 3806  grad_norm: 412.5438  loss: 3.2846  loss_cls: 0.0462  loss_bbox: 0.1948  loss_iou: 0.2701  d0.loss_cls: 0.1774  d0.loss_bbox: 0.2071  d0.loss_iou: 0.2711  d1.loss_cls: 0.0960  d1.loss_bbox: 0.1970  d1.loss_iou: 0.2658  d2.loss_cls: 0.0742  d2.loss_bbox: 0.1974  d2.loss_iou: 0.2660  d3.loss_cls: 0.0533  d3.loss_bbox: 0.1925  d3.loss_iou: 0.2691  d4.loss_cls: 0.0463  d4.loss_bbox: 0.1933  d4.loss_iou: 0.2670
2023/12/02 20:52:23 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:52:23 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/12/02 20:52:25 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:52:26 - mmengine - INFO - bbox_mAP_copypaste: 0.537 0.834 0.636 0.006 0.251 0.651
2023/12/02 20:52:26 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.5370  coco/bbox_mAP_50: 0.8340  coco/bbox_mAP_75: 0.6360  coco/bbox_mAP_s: 0.0060  coco/bbox_mAP_m: 0.2510  coco/bbox_mAP_l: 0.6510  data_time: 0.0031  time: 0.1004
2023/12/02 20:52:40 - mmengine - INFO - Epoch(train) [41][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:02:39  time: 0.2909  data_time: 0.0030  memory: 3779  grad_norm: 295.8125  loss: 2.6529  loss_cls: 0.0392  loss_bbox: 0.1452  loss_iou: 0.2223  d0.loss_cls: 0.1123  d0.loss_bbox: 0.1560  d0.loss_iou: 0.2335  d1.loss_cls: 0.0847  d1.loss_bbox: 0.1485  d1.loss_iou: 0.2275  d2.loss_cls: 0.0644  d2.loss_bbox: 0.1522  d2.loss_iou: 0.2333  d3.loss_cls: 0.0388  d3.loss_bbox: 0.1492  d3.loss_iou: 0.2307  d4.loss_cls: 0.0374  d4.loss_bbox: 0.1502  d4.loss_iou: 0.2276
2023/12/02 20:52:43 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:52:43 - mmengine - INFO - Saving checkpoint at 41 epochs
2023/12/02 20:52:46 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:52:46 - mmengine - INFO - bbox_mAP_copypaste: 0.601 0.838 0.668 0.005 0.315 0.723
2023/12/02 20:52:46 - mmengine - INFO - Epoch(val) [41][13/13]    coco/bbox_mAP: 0.6010  coco/bbox_mAP_50: 0.8380  coco/bbox_mAP_75: 0.6680  coco/bbox_mAP_s: 0.0050  coco/bbox_mAP_m: 0.3150  coco/bbox_mAP_l: 0.7230  data_time: 0.0031  time: 0.1011
2023/12/02 20:53:00 - mmengine - INFO - Epoch(train) [42][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:02:21  time: 0.2872  data_time: 0.0025  memory: 3803  grad_norm: 897.1211  loss: 2.6571  loss_cls: 0.0525  loss_bbox: 0.1326  loss_iou: 0.2010  d0.loss_cls: 0.1678  d0.loss_bbox: 0.1464  d0.loss_iou: 0.2248  d1.loss_cls: 0.1262  d1.loss_bbox: 0.1374  d1.loss_iou: 0.2029  d2.loss_cls: 0.0903  d2.loss_bbox: 0.1473  d2.loss_iou: 0.2178  d3.loss_cls: 0.0719  d3.loss_bbox: 0.1390  d3.loss_iou: 0.2071  d4.loss_cls: 0.0570  d4.loss_bbox: 0.1333  d4.loss_iou: 0.2016
2023/12/02 20:53:03 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:53:03 - mmengine - INFO - Saving checkpoint at 42 epochs
2023/12/02 20:53:06 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:53:06 - mmengine - INFO - bbox_mAP_copypaste: 0.606 0.835 0.695 0.011 0.323 0.731
2023/12/02 20:53:06 - mmengine - INFO - Epoch(val) [42][13/13]    coco/bbox_mAP: 0.6060  coco/bbox_mAP_50: 0.8350  coco/bbox_mAP_75: 0.6950  coco/bbox_mAP_s: 0.0110  coco/bbox_mAP_m: 0.3230  coco/bbox_mAP_l: 0.7310  data_time: 0.0032  time: 0.1044
2023/12/02 20:53:21 - mmengine - INFO - Epoch(train) [43][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:02:04  time: 0.2933  data_time: 0.0027  memory: 3530  grad_norm: 520.1335  loss: 2.4609  loss_cls: 0.0681  loss_bbox: 0.1232  loss_iou: 0.1761  d0.loss_cls: 0.1711  d0.loss_bbox: 0.1362  d0.loss_iou: 0.2065  d1.loss_cls: 0.0946  d1.loss_bbox: 0.1294  d1.loss_iou: 0.1905  d2.loss_cls: 0.0768  d2.loss_bbox: 0.1305  d2.loss_iou: 0.1953  d3.loss_cls: 0.0690  d3.loss_bbox: 0.1280  d3.loss_iou: 0.1852  d4.loss_cls: 0.0708  d4.loss_bbox: 0.1273  d4.loss_iou: 0.1823
2023/12/02 20:53:24 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:53:24 - mmengine - INFO - Saving checkpoint at 43 epochs
2023/12/02 20:53:26 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:53:26 - mmengine - INFO - bbox_mAP_copypaste: 0.626 0.841 0.682 0.011 0.346 0.759
2023/12/02 20:53:26 - mmengine - INFO - Epoch(val) [43][13/13]    coco/bbox_mAP: 0.6260  coco/bbox_mAP_50: 0.8410  coco/bbox_mAP_75: 0.6820  coco/bbox_mAP_s: 0.0110  coco/bbox_mAP_m: 0.3460  coco/bbox_mAP_l: 0.7590  data_time: 0.0032  time: 0.1017
2023/12/02 20:53:41 - mmengine - INFO - Epoch(train) [44][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:01:47  time: 0.2829  data_time: 0.0030  memory: 3806  grad_norm: 311.9085  loss: 1.9428  loss_cls: 0.0168  loss_bbox: 0.1078  loss_iou: 0.1475  d0.loss_cls: 0.1424  d0.loss_bbox: 0.1337  d0.loss_iou: 0.1779  d1.loss_cls: 0.0973  d1.loss_bbox: 0.1072  d1.loss_iou: 0.1460  d2.loss_cls: 0.0370  d2.loss_bbox: 0.1126  d2.loss_iou: 0.1535  d3.loss_cls: 0.0165  d3.loss_bbox: 0.1122  d3.loss_iou: 0.1559  d4.loss_cls: 0.0167  d4.loss_bbox: 0.1099  d4.loss_iou: 0.1521
2023/12/02 20:53:44 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:53:44 - mmengine - INFO - Saving checkpoint at 44 epochs
2023/12/02 20:53:47 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:53:47 - mmengine - INFO - bbox_mAP_copypaste: 0.642 0.837 0.699 0.019 0.364 0.767
2023/12/02 20:53:47 - mmengine - INFO - Epoch(val) [44][13/13]    coco/bbox_mAP: 0.6420  coco/bbox_mAP_50: 0.8370  coco/bbox_mAP_75: 0.6990  coco/bbox_mAP_s: 0.0190  coco/bbox_mAP_m: 0.3640  coco/bbox_mAP_l: 0.7670  data_time: 0.0031  time: 0.1015
2023/12/02 20:54:01 - mmengine - INFO - Epoch(train) [45][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:01:29  time: 0.2797  data_time: 0.0025  memory: 3803  grad_norm: 468.9898  loss: 2.7346  loss_cls: 0.0617  loss_bbox: 0.1244  loss_iou: 0.2189  d0.loss_cls: 0.1638  d0.loss_bbox: 0.1497  d0.loss_iou: 0.2399  d1.loss_cls: 0.1341  d1.loss_bbox: 0.1351  d1.loss_iou: 0.2243  d2.loss_cls: 0.0962  d2.loss_bbox: 0.1307  d2.loss_iou: 0.2257  d3.loss_cls: 0.0814  d3.loss_bbox: 0.1236  d3.loss_iou: 0.2141  d4.loss_cls: 0.0653  d4.loss_bbox: 0.1260  d4.loss_iou: 0.2199
2023/12/02 20:54:04 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:54:04 - mmengine - INFO - Saving checkpoint at 45 epochs
2023/12/02 20:54:07 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:54:07 - mmengine - INFO - bbox_mAP_copypaste: 0.638 0.838 0.685 0.034 0.357 0.760
2023/12/02 20:54:07 - mmengine - INFO - Epoch(val) [45][13/13]    coco/bbox_mAP: 0.6380  coco/bbox_mAP_50: 0.8380  coco/bbox_mAP_75: 0.6850  coco/bbox_mAP_s: 0.0340  coco/bbox_mAP_m: 0.3570  coco/bbox_mAP_l: 0.7600  data_time: 0.0033  time: 0.1033
2023/12/02 20:54:22 - mmengine - INFO - Epoch(train) [46][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:01:12  time: 0.2990  data_time: 0.0030  memory: 3808  grad_norm: 493.7723  loss: 2.4129  loss_cls: 0.0832  loss_bbox: 0.1158  loss_iou: 0.1565  d0.loss_cls: 0.1731  d0.loss_bbox: 0.1530  d0.loss_iou: 0.2018  d1.loss_cls: 0.1304  d1.loss_bbox: 0.1259  d1.loss_iou: 0.1795  d2.loss_cls: 0.0937  d2.loss_bbox: 0.1142  d2.loss_iou: 0.1612  d3.loss_cls: 0.0948  d3.loss_bbox: 0.1138  d3.loss_iou: 0.1501  d4.loss_cls: 0.0969  d4.loss_bbox: 0.1125  d4.loss_iou: 0.1564
2023/12/02 20:54:25 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:54:25 - mmengine - INFO - Saving checkpoint at 46 epochs
2023/12/02 20:54:27 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:54:28 - mmengine - INFO - bbox_mAP_copypaste: 0.638 0.834 0.695 0.000 0.359 0.766
2023/12/02 20:54:28 - mmengine - INFO - Epoch(val) [46][13/13]    coco/bbox_mAP: 0.6380  coco/bbox_mAP_50: 0.8340  coco/bbox_mAP_75: 0.6950  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3590  coco/bbox_mAP_l: 0.7660  data_time: 0.0031  time: 0.1038
2023/12/02 20:54:42 - mmengine - INFO - Epoch(train) [47][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:00:55  time: 0.2819  data_time: 0.0031  memory: 3505  grad_norm: 414.3159  loss: 2.2555  loss_cls: 0.0691  loss_bbox: 0.1097  loss_iou: 0.1570  d0.loss_cls: 0.1735  d0.loss_bbox: 0.1073  d0.loss_iou: 0.1827  d1.loss_cls: 0.1207  d1.loss_bbox: 0.1153  d1.loss_iou: 0.1714  d2.loss_cls: 0.0870  d2.loss_bbox: 0.1148  d2.loss_iou: 0.1737  d3.loss_cls: 0.0772  d3.loss_bbox: 0.1078  d3.loss_iou: 0.1607  d4.loss_cls: 0.0693  d4.loss_bbox: 0.1025  d4.loss_iou: 0.1556
2023/12/02 20:54:45 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:54:45 - mmengine - INFO - Saving checkpoint at 47 epochs
2023/12/02 20:54:48 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:54:48 - mmengine - INFO - bbox_mAP_copypaste: 0.623 0.838 0.690 0.000 0.343 0.751
2023/12/02 20:54:48 - mmengine - INFO - Epoch(val) [47][13/13]    coco/bbox_mAP: 0.6230  coco/bbox_mAP_50: 0.8380  coco/bbox_mAP_75: 0.6900  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3430  coco/bbox_mAP_l: 0.7510  data_time: 0.0039  time: 0.1044
2023/12/02 20:55:02 - mmengine - INFO - Epoch(train) [48][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:00:37  time: 0.2837  data_time: 0.0031  memory: 3806  grad_norm: 249.1818  loss: 2.1416  loss_cls: 0.0298  loss_bbox: 0.1120  loss_iou: 0.1645  d0.loss_cls: 0.1444  d0.loss_bbox: 0.1363  d0.loss_iou: 0.2012  d1.loss_cls: 0.0764  d1.loss_bbox: 0.1158  d1.loss_iou: 0.1791  d2.loss_cls: 0.0494  d2.loss_bbox: 0.1225  d2.loss_iou: 0.1802  d3.loss_cls: 0.0314  d3.loss_bbox: 0.1145  d3.loss_iou: 0.1695  d4.loss_cls: 0.0315  d4.loss_bbox: 0.1141  d4.loss_iou: 0.1688
2023/12/02 20:55:05 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:55:05 - mmengine - INFO - Saving checkpoint at 48 epochs
2023/12/02 20:55:07 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:55:07 - mmengine - INFO - bbox_mAP_copypaste: 0.652 0.840 0.709 0.028 0.387 0.771
2023/12/02 20:55:07 - mmengine - INFO - Epoch(val) [48][13/13]    coco/bbox_mAP: 0.6520  coco/bbox_mAP_50: 0.8400  coco/bbox_mAP_75: 0.7090  coco/bbox_mAP_s: 0.0280  coco/bbox_mAP_m: 0.3870  coco/bbox_mAP_l: 0.7710  data_time: 0.0031  time: 0.1019
2023/12/02 20:55:21 - mmengine - INFO - Epoch(train) [49][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:00:20  time: 0.2821  data_time: 0.0034  memory: 3779  grad_norm: 954.4644  loss: 2.4767  loss_cls: 0.0551  loss_bbox: 0.1220  loss_iou: 0.1865  d0.loss_cls: 0.1753  d0.loss_bbox: 0.1306  d0.loss_iou: 0.2154  d1.loss_cls: 0.1187  d1.loss_bbox: 0.1220  d1.loss_iou: 0.1824  d2.loss_cls: 0.1063  d2.loss_bbox: 0.1240  d2.loss_iou: 0.1860  d3.loss_cls: 0.0788  d3.loss_bbox: 0.1174  d3.loss_iou: 0.1840  d4.loss_cls: 0.0613  d4.loss_bbox: 0.1234  d4.loss_iou: 0.1874
2023/12/02 20:55:24 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:55:24 - mmengine - INFO - Saving checkpoint at 49 epochs
2023/12/02 20:55:27 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:55:27 - mmengine - INFO - bbox_mAP_copypaste: 0.648 0.841 0.699 0.025 0.368 0.774
2023/12/02 20:55:27 - mmengine - INFO - Epoch(val) [49][13/13]    coco/bbox_mAP: 0.6480  coco/bbox_mAP_50: 0.8410  coco/bbox_mAP_75: 0.6990  coco/bbox_mAP_s: 0.0250  coco/bbox_mAP_m: 0.3680  coco/bbox_mAP_l: 0.7740  data_time: 0.0037  time: 0.1018
2023/12/02 20:55:30 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:55:41 - mmengine - INFO - Epoch(train) [50][50/61]  base_lr: 2.0000e-05 lr: 2.0000e-05  eta: 0:00:03  time: 0.2782  data_time: 0.0030  memory: 3808  grad_norm: 410.4402  loss: 2.4964  loss_cls: 0.0452  loss_bbox: 0.1301  loss_iou: 0.1829  d0.loss_cls: 0.1726  d0.loss_bbox: 0.1498  d0.loss_iou: 0.1996  d1.loss_cls: 0.0996  d1.loss_bbox: 0.1515  d1.loss_iou: 0.2085  d2.loss_cls: 0.0863  d2.loss_bbox: 0.1414  d2.loss_iou: 0.1920  d3.loss_cls: 0.0504  d3.loss_bbox: 0.1384  d3.loss_iou: 0.1850  d4.loss_cls: 0.0455  d4.loss_bbox: 0.1330  d4.loss_iou: 0.1844
2023/12/02 20:55:44 - mmengine - INFO - Exp name: deformable-detr_r50_16xb2-50e_balloon_20231202_203849
2023/12/02 20:55:44 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/12/02 20:55:46 - mmengine - INFO - Evaluating bbox...
2023/12/02 20:55:47 - mmengine - INFO - bbox_mAP_copypaste: 0.669 0.847 0.692 0.021 0.403 0.790
2023/12/02 20:55:47 - mmengine - INFO - Epoch(val) [50][13/13]    coco/bbox_mAP: 0.6690  coco/bbox_mAP_50: 0.8470  coco/bbox_mAP_75: 0.6920  coco/bbox_mAP_s: 0.0210  coco/bbox_mAP_m: 0.4030  coco/bbox_mAP_l: 0.7900  data_time: 0.0031  time: 0.1018
